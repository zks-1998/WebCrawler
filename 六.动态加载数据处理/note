一.selenium模块的基本使用
[səˈliːniəm]
问题：selenium模块和爬虫之间具有怎样的关联？
    - 便捷的获取网站中动态加载的数据
    - 便捷实现模拟登录
什么是selenium模块？
    - 基于浏览器自动化的一个模块。
selenium使用流程：
    - 环境安装：pip install selenium
    - 下载一个浏览器的驱动程序（谷歌浏览器）
        - 下载路径：http://chromedriver.storage.googleapis.com/index.html
        - 驱动程序和浏览器的映射关系：http://blog.csdn.net/huilan_same/article/details/51896672
    - 实例化一个浏览器对象 bro = webdriver.Chrome(executable_path='./chromedriver.exe')
实现滑轮滑到底部：
i = 100
for i in range(2, 500):  # 也可以设置一个较大的数，一下到底
    js = "var q=document.documentElement.scrollTop={}".format(i * 100)  # javascript语句
    driver.execute_script(js)

二.- selenium处理iframe
        - 如果定位的标签存在于iframe标签之中，则必须使用switch_to.frame('id')
        - 动作链（拖动）：from selenium.webdriver import ActionChains
            - 实例化一个动作链对象：action = ActionChains(bro)
            - click_and_hold（div）：长按且点击操作
            - move_by_offset(x,y)
            - perform()让动作链立即执行
            - action.release()释放动作链对象
            - user.send_keys('1355776458')设置值
三.自动化事件链
# 导入动作链对应的类
from selenium.webdriver import ActionChains
# 动作链
action = ActionChains(driver)
action里面有相关的方法
最后执行perform()操作

三.无头浏览器：无可视化网页的弹出
1.import相关包
#实现无可视化界面
from selenium.webdriver.chrome.options import Options
2.复制以下代码
#实现无可视化界面的操作
chrome_options = Options()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--disable-gpu')
3.driver中添加相关参数
bro = webdriver.Chrome(executable_path='./chromedriver',chrome_options=chrome_options)

四.selenium规避被检测的风险
1.import相关包
#实现规避检测
from selenium.webdriver import ChromeOptions
2.复制以下代码
option = ChromeOptions()
option.add_argument('--disable-blink-features=AutomationControlled')
3.driver中添加相关参数
bro = webdriver.Chrome(executable_path='./chromedriver',chrome_options=chrome_options, options=option)